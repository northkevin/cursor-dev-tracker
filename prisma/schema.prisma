generator client {
    provider = "prisma-client-js"
    output   = "./client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Session {
    id        String    @id @default(uuid())
    startTime DateTime  @default(now())
    endTime   DateTime?

    fileChanges    FileChange[]
    aiInteractions AIInteraction[]
    commands       Command[]
}

model FileChange {
    id         String   @id @default(uuid())
    sessionId  String
    timestamp  DateTime @default(now())
    filePath   String
    changeType String // "created", "modified", "deleted"

    session Session @relation(fields: [sessionId], references: [id])
}

model AIInteraction {
    id        String   @id @default(uuid())
    sessionId String
    timestamp DateTime @default(now())
    prompt    String
    response  String

    session Session @relation(fields: [sessionId], references: [id])
}

model Command {
    id        String          @id @default(uuid())
    sessionId String
    timestamp DateTime        @default(now())
    command   String
    type      String // "git", "build", "test", etc.
    gitData   GitOperation?
    buildData BuildOperation?
    testData  TestOperation?

    session Session @relation(fields: [sessionId], references: [id])
}

model GitOperation {
    id           String  @id @default(uuid())
    commandId    String  @unique
    operation    String // "commit", "push", "pull", "merge", etc.
    branch       String
    commitHash   String?
    filesChanged String? // JSON array of changed files

    command Command @relation(fields: [commandId], references: [id])
}

model BuildOperation {
    id          String  @id @default(uuid())
    commandId   String  @unique
    environment String // "development", "production"
    framework   String // "next", "vite", "webpack", etc.
    success     Boolean
    duration    Int // in milliseconds
    errors      String? // JSON array of error messages
    warnings    String? // JSON array of warning messages
    outputLog   String? // Full console output if needed

    command Command @relation(fields: [commandId], references: [id])
}

model TestOperation {
    id           String  @id @default(uuid())
    commandId    String  @unique
    framework    String // "jest", "vitest", "playwright", etc.
    success      Boolean
    duration     Int // in milliseconds
    totalTests   Int
    passedTests  Int
    failedTests  Int
    skippedTests Int
    errors       String? // JSON array of error messages
    outputLog    String? // Full console output if needed

    command Command @relation(fields: [commandId], references: [id])
}
